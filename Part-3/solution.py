# -*- coding: utf-8 -*-
"""IML_Lab 8_B21BB006.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V_SvjpbSdMNp4O9CtxHTNDjqZU4-trMn

Probelem 1 Question 1
"""

import logging
import pandas as pd
from numpy.random import RandomState
import matplotlib.pyplot as plt
import numpy as np
from sklearn.datasets import fetch_olivetti_faces
from sklearn import cluster

rng = RandomState(0)

# Display progress logs on stdout
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

faces, classes = fetch_olivetti_faces(return_X_y=True, shuffle=False, random_state=rng)
faces = faces[:100]
classes = classes[:100]
n_samples, n_features = faces.shape

# Global centering (focus on one feature, centering all samples)
faces_centered = faces - faces.mean(axis=0)

# Local centering (focus on one sample, centering all features)
faces_centered -= faces_centered.mean(axis=1).reshape(n_samples, -1)

print("Dataset consists of %d faces" % n_samples)

faces

classes

type(faces)

np.random.shuffle(faces)

n_row, n_col = 2, 3
n_components = n_row * n_col
image_shape = (64, 64)


def plot_gallery(title, images, n_col=n_col, n_row=n_row, cmap=plt.cm.gray):
    fig, axs = plt.subplots(
        nrows=n_row,
        ncols=n_col,
        figsize=(2.0 * n_col, 2.3 * n_row),
        facecolor="white",
        constrained_layout=True,
    )
    fig.set_constrained_layout_pads(w_pad=0.01, h_pad=0.02, hspace=0, wspace=0)
    fig.set_edgecolor("black")
    fig.suptitle(title, size=16)
    for ax, vec in zip(axs.flat, images):
        vmax = max(vec.max(), -vec.min())
        im = ax.imshow(
            vec.reshape(image_shape),
            cmap=cmap,
            interpolation="nearest",
            vmin=-vmax,
            vmax=vmax,
        )
        ax.axis("off")

    fig.colorbar(im, ax=axs, orientation="horizontal", shrink=0.99, aspect=40, pad=0.01)
    plt.show()

plot_gallery("Faces from dataset", faces_centered[:n_components])

from sklearn.decomposition import PCA, FastICA,KernelPCA,TruncatedSVD
import numpy as np
from numpy.testing import assert_array_almost_equal
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
from numpy import linalg as LA
max_comp=100
start=10
error_record=[]
for i in range(start,max_comp):
    pca = PCA(n_components=i, random_state=42)
    pca2_results = pca.fit_transform(faces)
    pca2_proj_back=pca.inverse_transform(pca2_results)
    total_loss=LA.norm((faces-pca2_proj_back),None)
    error_record.append(total_loss)

print("The min error comes at ",error_record.index(min(error_record))+1)
plt.clf()
plt.figure(figsize=(15,15))
plt.title("reconstruct error of pca")
plt.plot(error_record,'r')
plt.xticks(range(len(error_record)), range(start,max_comp), rotation='vertical')
plt.xlim([-1, len(error_record)])
plt.show()

x=faces
y=classes

from sklearn.decomposition import PCA
pca = PCA(n_components=6)
X_pca = pca.fit_transform(x)
X_pca.shape

pca.explained_variance_ratio_

X_pca

"""Probelem 1 Question 2"""

import pandas as pd
face = pd.DataFrame(faces)
data = face.iloc[:, [0,1,2,3,4,5,6,7,8,9]]

n_row, n_col = 2, 3
n_components = 3
image_shape = (64, 64)

def plot_gallery(title, images, n_col=n_col, n_row=n_row, cmap=plt.cm.gray):
    fig, axs = plt.subplots(
        nrows=n_row,
        ncols=n_col,
        figsize=(2.0 * n_col, 2.3 * n_row),
        facecolor="white",
        constrained_layout=True,
    )
    fig.set_constrained_layout_pads(w_pad=0.01, h_pad=0.02, hspace=0, wspace=0)
    fig.set_edgecolor("black")
    fig.suptitle(title, size=16)
    for ax, vec in zip(axs.flat, images):
        vmax = max(vec.max(), -vec.min())
        im = ax.imshow(
            vec.reshape(image_shape),
            cmap=cmap,
            interpolation="nearest",
            vmin=-vmax,
            vmax=vmax,
        )
        ax.axis("off")

    fig.colorbar(im, ax=axs, orientation="horizontal", shrink=0.99, aspect=40, pad=0.01)
    plt.show()

plot_gallery("Faces from dataset", faces_centered[:n_components])

n_row, n_col = 2, 3
n_components = 4
image_shape = (64, 64)

def plot_gallery(title, images, n_col=n_col, n_row=n_row, cmap=plt.cm.gray):
    fig, axs = plt.subplots(
        nrows=n_row,
        ncols=n_col,
        figsize=(2.0 * n_col, 2.3 * n_row),
        facecolor="white",
        constrained_layout=True,
    )
    fig.set_constrained_layout_pads(w_pad=0.01, h_pad=0.02, hspace=0, wspace=0)
    fig.set_edgecolor("black")
    fig.suptitle(title, size=16)
    for ax, vec in zip(axs.flat, images):
        vmax = max(vec.max(), -vec.min())
        im = ax.imshow(
            vec.reshape(image_shape),
            cmap=cmap,
            interpolation="nearest",
            vmin=-vmax,
            vmax=vmax,
        )
        ax.axis("off")

    fig.colorbar(im, ax=axs, orientation="horizontal", shrink=0.99, aspect=40, pad=0.01)
    plt.show()

plot_gallery("Faces from dataset", faces_centered[:n_components])

n_row, n_col = 2, 3
n_components = 5
image_shape = (64, 64)

def plot_gallery(title, images, n_col=n_col, n_row=n_row, cmap=plt.cm.gray):
    fig, axs = plt.subplots(
        nrows=n_row,
        ncols=n_col,
        figsize=(2.0 * n_col, 2.3 * n_row),
        facecolor="white",
        constrained_layout=True,
    )
    fig.set_constrained_layout_pads(w_pad=0.01, h_pad=0.02, hspace=0, wspace=0)
    fig.set_edgecolor("black")
    fig.suptitle(title, size=16)
    for ax, vec in zip(axs.flat, images):
        vmax = max(vec.max(), -vec.min())
        im = ax.imshow(
            vec.reshape(image_shape),
            cmap=cmap,
            interpolation="nearest",
            vmin=-vmax,
            vmax=vmax,
        )
        ax.axis("off")

    fig.colorbar(im, ax=axs, orientation="horizontal", shrink=0.99, aspect=40, pad=0.01)
    plt.show()

plot_gallery("Faces from dataset", faces_centered[:n_components])

n_row, n_col = 2, 3
n_components = 6
image_shape = (64, 64)

def plot_gallery(title, images, n_col=n_col, n_row=n_row, cmap=plt.cm.gray):
    fig, axs = plt.subplots(
        nrows=n_row,
        ncols=n_col,
        figsize=(2.0 * n_col, 2.3 * n_row),
        facecolor="white",
        constrained_layout=True,
    )
    fig.set_constrained_layout_pads(w_pad=0.01, h_pad=0.02, hspace=0, wspace=0)
    fig.set_edgecolor("black")
    fig.suptitle(title, size=16)
    for ax, vec in zip(axs.flat, images):
        vmax = max(vec.max(), -vec.min())
        im = ax.imshow(
            vec.reshape(image_shape),
            cmap=cmap,
            interpolation="nearest",
            vmin=-vmax,
            vmax=vmax,
        )
        ax.axis("off")

    fig.colorbar(im, ax=axs, orientation="horizontal", shrink=0.99, aspect=40, pad=0.01)
    plt.show()

plot_gallery("Faces from dataset", faces_centered[:n_components])

"""Probelem 2"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import preprocessing, svm
from sklearn.model_selection import train_test_split

df= pd.read_csv("/content/iris.csv", header=None, names = ["sepal length in cm","sepal width in cm","petal length in cm","petal width in cm","class" ])
df.head()

df.fillna(method ='ffill', inplace = True)
df

df.info

column = np.array(df.columns)
new_data = df[:]
# print(new_data)
for i in column:
  # print(data[i])
  if(i=="class"):
    continue

  percentile25 = df[i].quantile(0.25)
  percentile75 = df[i].quantile(0.75)
  iqr = percentile75 - percentile25
  upperlimit = percentile75 + 1.5*iqr
  lowerlimit = percentile25 - 1.5*iqr

  new_data= new_data[(new_data[i] < upperlimit) & (new_data[i] > lowerlimit)]
 
  
new_data

from sklearn.preprocessing import MinMaxScaler
minmax = MinMaxScaler()
X = new_data.iloc[:,:-1]
minmax.fit(X)
minmaxdata = minmax.transform(X)

df_data = pd.DataFrame(minmaxdata)
df_data = df_data.dropna(axis=0)
df_data.columns = ["sepal length in cm","sepal width in cm","petal length in cm","petal width in cm"]
df_data

df_data["Class"]=new_data["class"]
df_data

df_data.fillna(method ='ffill', inplace = True)
df_data

x=df_data.iloc[:,:-1]
y=df_data.iloc[:,-1]

from sklearn.model_selection import train_test_split

x_train ,x_test , y_train , y_test  = train_test_split( x , y , test_size = 0.2, random_state=30)

x_train.head()

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train, y_train)
model.score(x_test, y_test)

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis(n_components=2)
X_r2 = lda.fit(x, y).transform(x)

lda.explained_variance_ratio_

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y)
lda = LinearDiscriminantAnalysis(n_components=2)
lda.fit(X_train, y_train)

from sklearn.metrics import accuracy_score
y_pred = lda.predict(X_test)
print(accuracy_score(y_test, y_pred))

"""n component =1"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis(n_components=1)
X_r2 = lda.fit(x, y).transform(x)

lda.explained_variance_ratio_

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x, y)
lda = LinearDiscriminantAnalysis(n_components=1)
lda.fit(X_train, y_train)

from sklearn.metrics import accuracy_score
y_pred = lda.predict(X_test)
print(accuracy_score(y_test, y_pred))